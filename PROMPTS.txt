Windows Developer PowerShell versions (build + tests enabled)

KICKOFF — Windows Dev PowerShell

Act as a senior VSIX engineer, verification lead, and release captain on Windows Developer PowerShell: EXECUTE TODO_VisualStudio.md strictly top→bottom (no skipping); fully IMPLEMENT the codebase (no stubs) incl. MEF/AsyncPackage wiring, ToolWindow chat, Editor context actions, diff/exec/approvals, WSL fallback; INTEGRATE Codex CLI via `codex proto` JSON-lines (bi-directional streaming, back-pressure, timeouts, retries, structured logs); ADD deterministic settings, session resume, safe paste (no implicit Enter), and per-file/per-solution context; RESTORE/BUILD with MSBuild (vswhere→MSBuild 17) in Release, RUN tests with vstest/dotnet test, and POST-TESTS per subtask with coverage gates; LAUNCH experimental VS (`devenv /rootsuffix Exp`) to validate load; COMMIT after each subtask using the exact required format; REQUIRE feature+UX parity with the official Codex VS Code extension; PACKAGE signed .vsix and EMIT artifacts (junit.xml, coverage.lcov, perf.csv, parity-report.md) — HARD-FAIL if any rule, test, or parity check is unmet.


CONTINUE — Windows Dev PowerShell

Act as a senior VSIX engineer, verification lead, and release captain on Windows Developer PowerShell: FULLY IMPLEMENT the entire codebase by executing TODO_VisualStudio.md top→bottom; scaffold solution/projects, manifests, assets, MEF/AsyncPackage; implement ToolWindow Chat, Editor context actions, diff/exec/approvals, WSL fallback; INTEGRATE Codex CLI via `codex proto` JSON-lines (bi-directional streaming, back-pressure, timeouts, retries, structured logs); add session resume, per-file/per-solution context, safe paste (no implicit Enter), deterministic settings; WRITE COMPLETE TESTS (unit, integration, E2E) per subtask with coverage gates, golden diffs, hermetic Codex mocks, Windows+WSL matrix; ENABLE StyleCop/Roslyn, format, static analysis, security scans, perf budgets; CI/CD for MSBuild Release (symbols), vstest, signing, VSIX packaging, publish pre-release+stable; implement approval flows (dry-run→apply), robust error handling, opt-in telemetry, privacy redactions; COMMIT after EACH subtask in the required format + conventional commits, auto-generate CHANGELOG + SemVer bump; ADD LICENSE/THIRD_PARTY_NOTICES/CODEOWNERS/CONTRIBUTING/SECURITY.md/DECISIONS.md and README (quickstart/troubleshooting); validate with `devenv /rootsuffix Exp`; ENSURE VS Code parity (document deltas), run POST-TESTS E2E, DELIVER signed .vsix + artifacts — FAIL BUILD on any unmet requirement or test.


VERIFY CURSOR WORK — Windows Dev PowerShell

Act as a senior VSIX engineer, verification lead, and release captain on Windows Developer PowerShell: INGEST TODO_VisualStudio.md and FOLLOW Execution Order strictly; for EACH T1..T10: VERIFY repo implementation, RUN targeted unit/integration/E2E and POST-TESTS with vstest/dotnet test, and ENFORCE Rules (≤100 chars/line, ≤300 lines/file, single-purpose functions); if [/] or [ ] COMPLETE the code (no stubs), if [!] UNBLOCK or document evidence; REQUIRE feature+UX parity with Codex VS Code extension and DOCUMENT any necessary deltas; CONFIRM Codex CLI via `codex proto` JSON-lines, ToolWindow chat, editor actions, diff/exec/approvals, WSL fallback, options (CLI path/Use WSL/Open on startup/model/effort/approval presets), telemetry/diagnostics/safe paste/session resume/context; for T1.11 BUILD and LOAD with `devenv /rootsuffix Exp` and capture proof; for T7.12 STRESS long outputs/rapid updates; for T8.*/T9.* “Implemented by Cursor AI” perform deterministic verification (UI automation + synthetic protocol fixtures) and VALIDATE/FIX; for T6.* confirm unified-diff parsing, conflict warnings, read-only/SCC respect, VS diff rendering; ADD/REPAIR tests with hermetic Codex mocks, golden diffs, Windows+WSL matrix, coverage/perf budgets; ENABLE lint/format/StyleCop/Roslyn, static analysis, security scans, privacy redactions; SET UP CI/CD to MSBuild Release (symbols), run smoke tests in clean experimental instance, sign and package .vsix, and produce reproducible artifacts; UPDATE vsixmanifest (InstallationTarget [17.0,18.0), icon/tags), README, CHANGELOG (0.1.0), EULA, SECURITY.md, CONTRIBUTING, CODEOWNERS, DECISIONS.md; RESOLVE keybinding conflicts; GENERATE artifacts (junit.xml, coverage.lcov, perf.csv, parity-report.md, todo.diff) and UPDATE TODO statuses; after EACH subtask PASSES post-tests, COMMIT exactly “[T<task>.<sub>] <short>; post-test=pass; compare=<summary>”; TAG release, attach signed .vsix and notes/GIFs, and emit an AUDIT LOG — HARD-FAIL on any unmet requirement, test, or parity check.

WSL / Ubuntu versions (no VS build/run; analyze, verify, prep CI)

KICKOFF — WSL Ubuntu (no build)

Act as a senior VSIX engineer, verification lead, and release captain operating in WSL/Ubuntu WITHOUT Visual Studio build/run: EXECUTE TODO_VisualStudio.md strictly top→bottom (no skipping) and FULLY IMPLEMENT code where platform-independent; INTEGRATE Codex CLI contracts at protocol level using synthetic fixtures for `codex proto` JSON-lines (bi-directional streaming/back-pressure/timeouts/retries/logs) and hermetic mocks; IMPLEMENT ToolWindow/chat/editor action/diff/exec/approvals/options/telemetry codepaths to the extent possible without VS process, with compile-time guards and clear Windows-required stubs noted; WRITE unit tests and property tests for protocol/diff parsing/approvals/state machines, run on Linux, and generate coverage; DO NOT attempt VSIX build/launch — instead GENERATE Windows CI pipeline (MSBuild Release + vstest + signing + package .vsix + `/rootsuffix Exp` smoke) and mark Windows-only tasks as pending; ENFORCE Rules (≤100 chars/line, ≤300 lines/file, single-purpose functions), UPDATE TODO statuses with evidence, produce artifacts (junit.xml, coverage.lcov, perf.csv, parity-report.md, windows-ci.yml), and HARD-FAIL if parity/logic tests or rules are unmet.


CONTINUE — WSL Ubuntu (no build)

Act as a senior VSIX engineer, verification lead, and release captain operating in WSL/Ubuntu WITHOUT Visual Studio build/run: CONTINUE executing TODO_VisualStudio.md top→bottom to COMPLETE platform-agnostic implementation; MAINTAIN protocol correctness for `codex proto` via mocks/fixtures, deterministic settings, session resume, per-file/per-solution context, safe paste policy; WRITE COMPLETE Linux-runnable tests (unit/integration using protocol simulators, golden diffs, approvals mapping), coverage gates, and performance budgets for parsers/state machines; ENABLE lint/format/static analysis/security scans; PREPARE Windows CI/CD (msbuild/vstest/sign/package/publish) and a parity checklist against the official Codex VS Code extension; DOCUMENT all Windows-required steps (devenv `/rootsuffix Exp`, VS diff services, VSCT wiring) as CI jobs with skip-on-Linux; UPDATE docs (README prerequisites, troubleshooting), license files, CODEOWNERS/CONTRIBUTING/SECURITY.md/DECISIONS.md; COMMIT after EACH subtask using the required format; DELIVER artifacts (junit.xml, coverage.lcov, perf.csv, parity-report.md, windows-ci.yml) — FAIL if rules, tests, or parity checks (logic-level) are unmet.


VERIFY CURSOR WORK — WSL Ubuntu (no build)

# VSIX Engineering Prompts

This document contains all prompt variations compiled together for both **Windows Developer PowerShell** (with Visual Studio build & test capability) and **WSL Ubuntu** (no VS build, logic-level only).

---

## Windows Developer PowerShell Versions

### KICKOFF — Windows Dev PowerShell
Act as a senior VSIX engineer, verification lead, and release captain on Windows Developer PowerShell: EXECUTE TODO_VisualStudio.md strictly top→bottom (no skipping); fully IMPLEMENT the codebase (no stubs) incl. MEF/AsyncPackage wiring, ToolWindow chat, Editor context actions, diff/exec/approvals, WSL fallback; INTEGRATE Codex CLI via `codex proto` JSON-lines (bi-directional streaming, back-pressure, timeouts, retries, structured logs); ADD deterministic settings, session resume, safe paste (no implicit Enter), and per-file/per-solution context; RESTORE/BUILD with MSBuild (vswhere→MSBuild 17) in Release, RUN tests with vstest/dotnet test, and POST-TESTS per subtask with coverage gates; LAUNCH experimental VS (`devenv /rootsuffix Exp`) to validate load; COMMIT after each subtask using the exact required format; REQUIRE feature+UX parity with the official Codex VS Code extension; PACKAGE signed .vsix and EMIT artifacts (junit.xml, coverage.lcov, perf.csv, parity-report.md) — HARD-FAIL if any rule, test, or parity check is unmet.

### CONTINUE — Windows Dev PowerShell
Act as a senior VSIX engineer, verification lead, and release captain on Windows Developer PowerShell: FULLY IMPLEMENT the entire codebase by executing TODO_VisualStudio.md top→bottom; scaffold solution/projects, manifests, assets, MEF/AsyncPackage; implement ToolWindow Chat, Editor context actions, diff/exec/approvals, WSL fallback; INTEGRATE Codex CLI via `codex proto` JSON-lines (bi-directional streaming, back-pressure, timeouts, retries, structured logs); add session resume, per-file/per-solution context, safe paste (no implicit Enter), deterministic settings; WRITE COMPLETE TESTS (unit, integration, E2E) per subtask with coverage gates, golden diffs, hermetic Codex mocks, Windows+WSL matrix; ENABLE StyleCop/Roslyn, format, static analysis, security scans, perf budgets; CI/CD for MSBuild Release (symbols), vstest, signing, VSIX packaging, publish pre-release+stable; implement approval flows (dry-run→apply), robust error handling, opt-in telemetry, privacy redactions; COMMIT after EACH subtask in the required format + conventional commits, auto-generate CHANGELOG + SemVer bump; ADD LICENSE/THIRD_PARTY_NOTICES/CODEOWNERS/CONTRIBUTING/SECURITY.md/DECISIONS.md and README (quickstart/troubleshooting); validate with `devenv /rootsuffix Exp`; ENSURE VS Code parity (document deltas), run POST-TESTS E2E, DELIVER signed .vsix + artifacts — FAIL BUILD on any unmet requirement or test.

### VERIFY CURSOR WORK — Windows Dev PowerShell
Act as a senior VSIX engineer, verification lead, and release captain on Windows Developer PowerShell: INGEST TODO_VisualStudio.md and FOLLOW Execution Order strictly; for EACH T1..T10: VERIFY repo implementation, RUN targeted unit/integration/E2E and POST-TESTS with vstest/dotnet test, and ENFORCE Rules (≤100 chars/line, ≤300 lines/file, single-purpose functions); if [/] or [ ] COMPLETE the code (no stubs), if [!] UNBLOCK or document evidence; REQUIRE feature+UX parity with Codex VS Code extension and DOCUMENT any necessary deltas; CONFIRM Codex CLI via `codex proto` JSON-lines, ToolWindow chat, editor actions, diff/exec/approvals, WSL fallback, options (CLI path/Use WSL/Open on startup/model/effort/approval presets), telemetry/diagnostics/safe paste/session resume/context; for T1.11 BUILD and LOAD with `devenv /rootsuffix Exp` and capture proof; for T7.12 STRESS long outputs/rapid updates; for T8.*/T9.* “Implemented by Cursor AI” perform deterministic verification (UI automation + synthetic protocol fixtures) and VALIDATE/FIX; for T6.* confirm unified-diff parsing, conflict warnings, read-only/SCC respect, VS diff rendering; ADD/REPAIR tests with hermetic Codex mocks, golden diffs, Windows+WSL matrix, coverage/perf budgets; ENABLE lint/format/StyleCop/Roslyn, static analysis, security scans, privacy redactions; SET UP CI/CD to MSBuild Release (symbols), run smoke tests in clean experimental instance, sign and package .vsix, and produce reproducible artifacts; UPDATE vsixmanifest (InstallationTarget [17.0,18.0), icon/tags), README, CHANGELOG (0.1.0), EULA, SECURITY.md, CONTRIBUTING, CODEOWNERS, DECISIONS.md; RESOLVE keybinding conflicts; GENERATE artifacts (junit.xml, coverage.lcov, perf.csv, parity-report.md, todo.diff) and UPDATE TODO statuses; after EACH subtask PASSES post-tests, COMMIT exactly “[T<task>.<sub>] <short>; post-test=pass; compare=<summary>”; TAG release, attach signed .vsix and notes/GIFs, and emit an AUDIT LOG — HARD-FAIL on any unmet requirement, test, or parity check.

---

## WSL Ubuntu Versions (no VS build/run)

### KICKOFF — WSL Ubuntu
Act as a senior VSIX engineer, verification lead, and release captain operating in WSL/Ubuntu WITHOUT Visual Studio build/run: EXECUTE TODO_VisualStudio.md strictly top→bottom (no skipping) and FULLY IMPLEMENT code where platform-independent; INTEGRATE Codex CLI contracts at protocol level using synthetic fixtures for `codex proto` JSON-lines (bi-directional streaming/back-pressure/timeouts/retries/logs) and hermetic mocks; IMPLEMENT ToolWindow/chat/editor action/diff/exec/approvals/options/telemetry codepaths to the extent possible without VS process, with compile-time guards and clear Windows-required stubs noted; WRITE unit tests and property tests for protocol/diff parsing/approvals/state machines, run on Linux, and generate coverage; DO NOT attempt VSIX build/launch — instead GENERATE Windows CI pipeline (MSBuild Release + vstest + signing + package .vsix + `/rootsuffix Exp` smoke) and mark Windows-only tasks as pending; ENFORCE Rules (≤100 chars/line, ≤300 lines/file, single-purpose functions), UPDATE TODO statuses with evidence, produce artifacts (junit.xml, coverage.lcov, perf.csv, parity-report.md, windows-ci.yml), and HARD-FAIL if parity/logic tests or rules are unmet.

### CONTINUE — WSL Ubuntu
Act as a senior VSIX engineer, verification lead, and release captain operating in WSL/Ubuntu WITHOUT Visual Studio build/run: CONTINUE executing TODO_VisualStudio.md top→bottom to COMPLETE platform-agnostic implementation; MAINTAIN protocol correctness for `codex proto` via mocks/fixtures, deterministic settings, session resume, per-file/per-solution context, safe paste policy; WRITE COMPLETE Linux-runnable tests (unit/integration using protocol simulators, golden diffs, approvals mapping), coverage gates, and performance budgets for parsers/state machines; ENABLE lint/format/static analysis/security scans; PREPARE Windows CI/CD (msbuild/vstest/sign/package/publish) and a parity checklist against the official Codex VS Code extension; DOCUMENT all Windows-required steps (devenv `/rootsuffix Exp`, VS diff services, VSCT wiring) as CI jobs with skip-on-Linux; UPDATE docs (README prerequisites, troubleshooting), license files, CODEOWNERS/CONTRIBUTING/SECURITY.md/DECISIONS.md; COMMIT after EACH subtask using the required format; DELIVER artifacts (junit.xml, coverage.lcov, perf.csv, parity-report.md, windows-ci.yml) — FAIL if rules, tests, or parity checks (logic-level) are unmet.

### VERIFY CURSOR WORK — WSL Ubuntu
Act as a senior VSIX engineer, verification lead, and release captain operating in WSL/Ubuntu WITHOUT Visual Studio build/run: INGEST TODO_VisualStudio.md and FOLLOW Execution Order strictly; for EACH T1..T10: VERIFY Cursor’s implemented items via source review + deterministic test harnesses (UI-model/view-model logic, protocol handlers, diff/exec/approvals) using synthetic `codex proto` fixtures; ENFORCE Rules (≤100 chars/line, ≤300 lines/file, single-purpose functions) and COMPLETE any [/] or [ ] items (no stubs where platform-agnostic); for [!] items DOCUMENT exact Windows dependencies; REQUIRE feature/UX parity at the logic-layer with the official Codex VS Code extension and RECORD any deltas; for T6.* validate unified-diff parsing/conflict warnings/RO/SCC guards; for T7.12 stress test long outputs/rapid updates in the console model using simulated streams; for T8.*/T9.* “Implemented by Cursor AI” perform deterministic verification (fixture-driven) and VALIDATE/FIX; PRODUCE artifacts (junit.xml, coverage.lcov, perf.csv, parity-report.md, todo.diff) and UPDATE TODO statuses; GENERATE a Windows CI/CD pipeline (MSBuild Release, vstest, signing, .vsix packaging, `/rootsuffix Exp` smoke) to be executed off-WSL; COMMIT after EACH subtask that passes Linux tests with exact “[T<task>.<sub>] <short>; post-test=pass; compare=<summary>”; FINALIZE with an AUDIT LOG mapping evidence→tasks — HARD-FAIL on unmet rules, parity (logic-layer), or tests.

=== Start Release Readiness Work ===
You are Codex, picking up the CodexVS22 release track. Review 	odo-release.md, report the
current checkbox state, then plan the next high-priority unchecked item. Execute that item or
document blockers, run required commands/tests, and update 	odo-release.md before you stop.
Provide a concise status report and remaining risks.
